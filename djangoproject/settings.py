"""
Django settings for djangoproject project.

Generated by 'django-admin startproject' using Django 3.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
from decouple import config
from rest_framework.reverse import reverse
from datetime import timedelta
from dj_database_url import parse as db_url

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'uyk@fx=p_7m1p5j-c3=)cl(niqn8n5+vt(q!2%$1^9arw8=8=^'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True 

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "django_filters",
    'bridger',
    'rest_framework',
    "rest_framework.authtoken",
    "django_extensions",
    'django_celery_beat',
    "corsheaders",
    'djangoapp',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    "corsheaders.middleware.CorsMiddleware",
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

REST_FRAMEWORK = {
    "DEFAULT_RENDERER_CLASSES": ("rest_framework.renderers.JSONRenderer", "rest_framework.renderers.BrowsableAPIRenderer",),
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
        "rest_framework.authentication.TokenAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": (
        "rest_framework.permissions.IsAuthenticated",
        "bridger.permissions.RestAPIModelPermissions",
    ),
    "DATETIME_FORMAT": "%Y-%m-%dT%H:%M:%S%z"
    # 'DEFAULT_METADATA_CLASS': 'wbutils.metadata.WorkbenchMetaData'
    # 'DEFAULT_METADATA_CLASS': 'drf_auto_endpoint.metadata.AutoMetadata'
}

CHANNEL_LAYERS = {
    "default": {"BACKEND": "channels_redis.core.RedisChannelLayer", "CONFIG": {"hosts": [("127.0.0.1", 6379)]},},
}

JWT_AUTH = {"JWT_AUTH_COOKIE": "JWT"}

ROOT_URLCONF = 'djangoproject.urls'
CORS_ORIGIN_ALLOW_ALL = True
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'djangoproject.wsgi.application'
ASGI_APPLICATION = "djangoproject.routing.application"


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
#     }
# }

"""
DATABASES = {
    'default': config(
        'DATABASE_URL',
        cast=db_url
    )
}
"""

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'postgres_djangoproject',
        'USER': 'root',
        'PASSWORD':'root',
        'HOST': 'localhost',
        'PORT': 5432,
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]
# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
MEDIA_ROOT = os.path.join(BASE_DIR, "mediafiles")
MEDIA_URL = "/media/"


CELERY_BROKER_URL = "redis://localhost:6379"
CELERY_RESULT_BACKEND = "redis://localhost:6379"
# CELERY_BROKER_URL = "redis://redis"
# CELERY_RESULT_BACKEND = "redis://redis"
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_IMPORTS = ['djangoapp.tasks',]

#from celery.schedules import crontab
# CELERY_BEAT_SCHEDULE = {
#     'run_parallel_get_global_quote': {
#         'task': 'djangoapp.tasks.run_parallel_get_global_quote',
#         'schedule': crontab(), # Execute every minute.
#         #'options': {'queue' : 'celery_periodic'} ##options are mapped to apply_async options
#     },
# }



CDN_BASE_ENDPOINT_URL = config("CDN_BASE_ENDPOINT_URL")
BASE_ENDPOINT_URL = config("BASE_ENDPOINT_URL")
FRONTEND_VERSION = config("FRONTEND_VERSION")
def auth_method(request):
    return {
        "type": "JWT",
        "config": {
            "token": reverse("authentication:token_obtain_pair", request=request),
            "refresh": reverse("authentication:token_refresh", request=request),
            "verify": reverse("authentication:token_verify", request=request),
            "username_field_key": "name",
            "username_field_label": "Name",
        },
    }
BRIDGER_SETTINGS = {
    "FRONTEND_CONTEXT": {
    # MANDATORY
        "CSS_URL": f'{CDN_BASE_ENDPOINT_URL}/css/main-{FRONTEND_VERSION.replace(".", "-")}.css',
        "JS_URL": f'{CDN_BASE_ENDPOINT_URL}/js/main-{FRONTEND_VERSION.replace(".", "-")}.js',
        "FAVICON_URL": f'{CDN_BASE_ENDPOINT_URL}/favicon.ico'
    }
}
BRIDGER_URL = BASE_ENDPOINT_URL

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=5),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    "VERIFYING_KEY": None,
    "AUDIENCE": None,
    "ISSUER": None,
}
